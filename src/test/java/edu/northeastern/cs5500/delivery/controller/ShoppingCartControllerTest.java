/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.northeastern.cs5500.delivery.controller;

import static com.google.common.truth.Truth.assertWithMessage;
import static org.junit.jupiter.api.Assertions.assertEquals;

import edu.northeastern.cs5500.delivery.model.Food;
import edu.northeastern.cs5500.delivery.model.ShoppingCart;
import edu.northeastern.cs5500.delivery.repository.GenericRepository;
import edu.northeastern.cs5500.delivery.repository.InMemoryRepository;
import java.util.HashMap;
import org.junit.jupiter.api.Test;

class ShoppingCartControllerTest {

    @Test
    void testRegisterCreatesValidShoppingCarts() {
        ShoppingCartController shoppingCartController =
                new ShoppingCartController(
                        new InMemoryRepository<ShoppingCart>(), new InMemoryRepository<Food>());

        for (ShoppingCart shoppingCart : shoppingCartController.getShoppingCarts()) {
            assertWithMessage(shoppingCart.getId().toHexString())
                    .that(shoppingCart.isValid())
                    .isTrue();
        }
    }

    @Test
    void testCanGetAllShoppingCarts() {
        ShoppingCartController shoppingCartController =
                new ShoppingCartController(
                        new InMemoryRepository<ShoppingCart>(), new InMemoryRepository<Food>());
        assertEquals(shoppingCartController.getShoppingCarts().size(), 2);
    }

    @Test
    void testCanAddShoppingCart() {
        ShoppingCartController shoppingCartController =
                new ShoppingCartController(
                        new InMemoryRepository<ShoppingCart>(), new InMemoryRepository<Food>());
        assertEquals(shoppingCartController.getShoppingCarts().size(), 2);
        ShoppingCart shoppingCart = new ShoppingCart();
        shoppingCart.setItems(new HashMap<>());
        shoppingCart.setTotalPrice(0L);
        try {
            shoppingCart = shoppingCartController.addShoppingCart(shoppingCart);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertEquals(shoppingCartController.getShoppingCarts().size(), 3);
    }

    @Test
    void testCanUpdateShoppingCart() {
        ShoppingCartController shoppingCartController =
                new ShoppingCartController(
                        new InMemoryRepository<ShoppingCart>(), new InMemoryRepository<Food>());
        ShoppingCart shoppingCart = new ShoppingCart();
        shoppingCart.setItems(new HashMap<>());
        shoppingCart.setTotalPrice(0L);
        try {
            shoppingCart = shoppingCartController.addShoppingCart(shoppingCart);
        } catch (Exception e) {
            e.printStackTrace();
        }
        shoppingCart.setTotalPrice(8L);
        try {
            shoppingCartController.updateShoppingCart(shoppingCart);
            shoppingCart = shoppingCartController.getShoppingCart(shoppingCart.getId());
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertEquals(shoppingCart.getTotalPrice(), 8L);
    }

    @Test
    void testCanDeleteShoppingCart() {
        // Create a shopping cart controller.
        ShoppingCartController shoppingCartController =
                new ShoppingCartController(
                        new InMemoryRepository<ShoppingCart>(), new InMemoryRepository<Food>());
        assertEquals(shoppingCartController.getShoppingCarts().size(), 2);

        // Add a shopping cart.
        ShoppingCart shoppingCart = new ShoppingCart();
        shoppingCart.setItems(new HashMap<>());
        shoppingCart.setTotalPrice(0L);
        try {
            shoppingCart = shoppingCartController.addShoppingCart(shoppingCart);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertEquals(shoppingCartController.getShoppingCarts().size(), 3);

        // Delete shopping carts.
        try {
            shoppingCartController.deleteShoppingCart(shoppingCart.getId());
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertEquals(shoppingCartController.getShoppingCarts().size(), 2);
    }

    @Test
    void testCanAddItem() throws Exception {
        GenericRepository<Food> foods = new InMemoryRepository<>();
        Food defaultFood2 = new Food();
        defaultFood2.setName("Food second");
        defaultFood2.setDescription("traditional Franch food");
        defaultFood2.setPrice(10L);
        defaultFood2 = foods.add(defaultFood2);

        ShoppingCartController shoppingCartController =
                new ShoppingCartController(new InMemoryRepository<ShoppingCart>(), foods);

        // Add a shopping cart.
        ShoppingCart shoppingCart = new ShoppingCart();
        shoppingCart.setItems(new HashMap<>());
        shoppingCart.setTotalPrice(0L);

        shoppingCart = shoppingCartController.addShoppingCart(shoppingCart);

        // Test adding items to non-existing shopping carts. First-time adding items to
        // a
        // shoppingcart.
        try {
            shoppingCart =
                    shoppingCartController.addItem(shoppingCart.getId(), defaultFood2.getId());
        } catch (Exception e) {
            e.printStackTrace();
        }

        assertEquals(
                shoppingCartController.getShoppingCart(shoppingCart.getId()).getItems().size(), 1);

        // Test adding items to existing shopping carts.
        try {
            shoppingCartController.addItem(shoppingCart.getId(), defaultFood2.getId());
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertEquals(
                shoppingCartController
                        .getShoppingCart(shoppingCart.getId())
                        .getItems()
                        .get(defaultFood2.getId().toString()),
                2);
    }

    @Test
    void testDeleteItem() throws Exception {
        GenericRepository<Food> foods = new InMemoryRepository<>();
        Food defaultFood2 = new Food();
        defaultFood2.setName("Food second");
        defaultFood2.setDescription("traditional Franch food");
        defaultFood2.setPrice(10L);
        defaultFood2 = foods.add(defaultFood2);

        ShoppingCartController shoppingCartController =
                new ShoppingCartController(new InMemoryRepository<ShoppingCart>(), foods);

        // Add a shopping cart.
        ShoppingCart shoppingCart = new ShoppingCart();
        HashMap<String, Integer> items = new HashMap<>();
        items.put(defaultFood2.getId().toString(), 2);
        shoppingCart.setItems(items);
        shoppingCart.setTotalPrice(20L);

        // Add the shopping cart.
        try {
            shoppingCart = shoppingCartController.addShoppingCart(shoppingCart);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertEquals(
                shoppingCartController
                        .getShoppingCart(shoppingCart.getId())
                        .getItems()
                        .get(defaultFood2.getId().toString()),
                2);

        // Test: delete one item.
        try {
            shoppingCartController.deleteItem(shoppingCart.getId(), defaultFood2.getId());
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertEquals(
                shoppingCartController
                        .getShoppingCart(shoppingCart.getId())
                        .getItems()
                        .get(defaultFood2.getId().toString()),
                1);

        // Test: keep deleting.
        try {
            shoppingCartController.deleteItem(shoppingCart.getId(), defaultFood2.getId());
        } catch (Exception e) {
            e.printStackTrace();
        }

        assertEquals(
                shoppingCartController
                        .getShoppingCart(shoppingCart.getId())
                        .getItems()
                        .get(defaultFood2.getId().toString()),
                null);
    }

    @Test
    void testCalculateTotalPrice() throws Exception {
        GenericRepository<Food> foods = new InMemoryRepository<>();
        Food defaultFood2 = new Food();
        defaultFood2.setName("Food second");
        defaultFood2.setDescription("traditional Franch food");
        defaultFood2.setPrice(10L);
        defaultFood2 = foods.add(defaultFood2);

        ShoppingCartController shoppingCartController =
                new ShoppingCartController(new InMemoryRepository<ShoppingCart>(), foods);

        ShoppingCart shoppingCart = new ShoppingCart();
        shoppingCart.setItems(new HashMap<>());
        shoppingCart.setTotalPrice(0L);

        try {
            shoppingCart = shoppingCartController.addItem(null, defaultFood2.getId());
            assertEquals(shoppingCartController.calculateTotalPrice(shoppingCart.getId()), 10L);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
